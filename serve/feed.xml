<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes of a Java developer</title>
    <description>Notes of a Java developer</description>
    <link>http://bdulac.github.io//</link>
    <atom:link href="http://bdulac.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>2014-09-09 12:46:56 +0200</pubDate>
    <lastBuildDate>2014-09-09 12:46:56 +0200</lastBuildDate>
    <generator>Jekyll v</generator>
    
      <item>
        <title>History of computing: information processing and transactions</title>
        <description>&lt;p&gt;
    &quot;Computer science is no more about computers than astronomy is about
    telescopes&quot; said &lt;a href=&quot;http://viaf.org/viaf/17820452&quot;&gt;Edsger
        Dijkstra&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
    I have always been interested in the two sides of
    computing:
&lt;/p&gt;

&lt;p&gt;
&lt;ul&gt;
    &lt;li&gt;Calculus&lt;/li&gt;
    &lt;li&gt;Information processing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In the early ages of computing, we tend to focus on the first machines
and their calculus properties.
&lt;a href=&quot;http://viaf.org/viaf/4963723&quot;&gt;Charles Babbage&lt;/a&gt;
inventions are famous.
&lt;/p&gt;

&lt;p&gt;
    But in the early 19th century, the pioneer was also interested in
    information processing and transactions. Reading &lt;a
        href=&quot;http://dx.doi.org/10.1145/1831407.1831417&quot;&gt;an article&lt;/a&gt;, I
    discovered he described the processes involving bank transactions in &lt;a
        href=&quot;http://books.google.fr/books/about/On_the_Economy_of_Machinery_and_Manufact.html?id=4QWZq4FDoH4C&quot;&gt;one
        of his works&lt;/a&gt;.
&lt;/p&gt;
</description>
        <pubDate>2014-02-19 00:00:00 +0100</pubDate>
        <link>http://bdulac.github.io//blog/history-of-computing-information-processing-and-transactions</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/history-of-computing-information-processing-and-transactions</guid>
        
        
      </item>
    
      <item>
        <title>Point of view: MVC frameworks</title>
        <description>&lt;p&gt;
    After some (bad) experiences, I am quite sceptical about &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt;
    frameworks. The hall of fame has accepted a few names: &lt;a
        href=&quot;http://struts.apache.org/&quot;&gt;Struts&lt;/a&gt;, &lt;a
        href=&quot;http://www.playframework.com/&quot;&gt;Play&lt;/a&gt;, &lt;a
        href=&quot;https://wicket.apache.org/&quot;&gt;Wicket&lt;/a&gt;... And then ?
&lt;/p&gt;

&lt;p&gt;
    Each period has its champion. Struts, as one of the elders, had a
    long period. So many developers had to use it. But what about software
    maintenance and evolutions ? Struts 1 upgrade to
    version 2 ? What about moving to another technology ?
&lt;/p&gt;

&lt;p&gt;
    Quite a nightmare, it is sometimes easier to rewrite completely
    the application. In my point of view, long term solutions rely directly on the
    Java platform. The classic &lt;a
        href=&quot;https://jcp.org/aboutJava/communityprocess/final/jsr315/&quot;&gt;Servlet&lt;/a&gt;
    / &lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/final/jsr245/&quot;&gt;JSP&lt;/a&gt;&amp;nbsp;tandem
    is not an MVC implementation but is plain and simple and evolutions are
    easy. I understand &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=314&quot;&gt;JSF&lt;/a&gt;
    enthusiasts. The solution is modern and interesting on a productivity
    point of view. I have a personal problem with JSF (and &lt;a
        href=&quot;http://www.youtube.com/watch?v=9ei-rbULWoA#t=47m&quot;&gt;others&lt;/a&gt;
    share my opinion) : JSF and JSP are bad companions. What a shame for
    two specifications...
&lt;/p&gt;

&lt;p&gt;
    While the RESTful architectural style is trendy, the idea of
    integrating &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=339&quot;&gt;JAX-RS&lt;/a&gt;
    and JSPs is interesting (&lt;a
        href=&quot;https://jersey.java.net/documentation/latest/mvc.html&quot;&gt;part&lt;/a&gt;
    of &lt;a href=&quot;https://jersey.java.net/&quot;&gt;Jersey&lt;/a&gt;). Hope it will be part of the core specification someday.
&lt;/p&gt;

&lt;p&gt;
    &lt;b&gt;Edit&lt;/b&gt; &lt;em&gt;(2014-08-21)&lt;/em&gt; : the JAX-RS / MVC integration was part of the 
    &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=339&quot;&gt;JSR 339&lt;/a&gt; initial request but was dismissed in the final specification. 
    A &lt;a href=&quot;https://java.net/projects/jax-rs-spec/lists/users/archive/2014-08/message/16&quot;&gt;recent message&lt;/a&gt; on the 
    specification list let me have some hope...
&lt;/p&gt;
</description>
        <pubDate>2014-01-10 00:00:00 +0100</pubDate>
        <link>http://bdulac.github.io//blog/point-of-view-mvc-frameworks</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/point-of-view-mvc-frameworks</guid>
        
        
      </item>
    
      <item>
        <title>Memory errors in Java</title>
        <description>&lt;p&gt;
    Memory in &lt;i&gt;Java&lt;/i&gt; is largely made easy by garbage collection. This
    automatic management of memory does not prevent from any memory
    problem. Here are some basics elements I find useful to review while
    facing a memory error.
&lt;/p&gt;

&lt;p&gt;
    The memory is divided in two distinct spaces, even if this &lt;a
        href=&quot;http://openjdk.java.net/jeps/122&quot;&gt;might change in Java 8&lt;/a&gt;&lt;a
        href=&quot;http://www.blogger.com/null&quot;&gt;.&lt;/a&gt;&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;The PermGen space contains classes definitions&lt;/li&gt;
    &lt;li&gt;The Heap space contains objects&lt;/li&gt;
&lt;/ul&gt;
When a memory problem occurs, an
&lt;a
    href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/OutOfMemoryError.html&quot;&gt;error&lt;/a&gt;
is raised. This
&lt;a
    href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html&quot;&gt;throwable&lt;/a&gt;
contains information about the cause of the problem and the impacted
memory space. Most of time, these informations are sufficient to help
solve the problem.
&lt;/p&gt;

&lt;p&gt;
    The JVM options mentioned in this post are for &lt;i&gt;HotSpot&lt;/i&gt;
    (Sun/Oracle implementation). For more informations, the &lt;a
        href=&quot;http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html&quot;&gt;official
        &lt;i&gt;HotSpot&lt;/i&gt; tuning documentation
    &lt;/a&gt; is very helpful.&lt;br /&gt;
    &lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/memleaks.html#gbyuu&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/memleaks.html#gbyuu&quot;&gt;&lt;u&gt;java.lang.OutOfMemoryError:
            PermGen space&lt;/u&gt;&lt;/a&gt;&lt;br /&gt;
&lt;ul&gt;&lt;/ul&gt;
The space allocated for classes definitions is full. This can happen if
the environment loads a large number of classes (common in Java EE
environments). The allocated space can be configured via the JVM option
&lt;i&gt;-XX:PermSize=256m&lt;/i&gt;
(for 256 megabytes).
&lt;/p&gt;

&lt;p&gt;
    In some situations, this saturation can be caused by a hot deployment.
    A workaround for such a problem is the JVM option&amp;nbsp; &lt;i&gt;-XX:+CMSClassUnloadingEnabled&lt;/i&gt;.
    This clear all references to obsolete classes definitions. A very
    helpful option when processing multiple hot deployments in a &lt;i&gt;Tomcat&lt;/i&gt;
    environment.
&lt;/p&gt;

&lt;p&gt;
    A &lt;a
        href=&quot;http://frankkieviet.blogspot.fr/2006/10/classloader-leaks-dreaded-permgen-space.html&quot;&gt;blog
        post&lt;/a&gt; by Frank Kieviet explains a pattern that could also cause PermGen
    space errors.
&lt;/p&gt;

&lt;p&gt;
    &lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/memleaks.html#gbyvh&quot;&gt;&lt;u&gt;Message
            java.lang.OutOfMemoryError: Java heap space&lt;/u&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The created objects stay in the Heap space while being referenced
    in the executed program. When an object is not referenced any more, it
    becomes available for release by the Garbage Collector (GC). Most of
    time, the GC acts when the available memory becomes low. This is highly
    configurable with many JVM options.&lt;/p&gt;
&lt;p&gt;
    If there is no memory leak, the easy solution is to increase the
    available space.&lt;br /&gt;All becomes complicated when there is a memory
    leak. The cause can be difficult to identify. Several tools help to
    identify the problem nature.
&lt;/p&gt;

&lt;p&gt;
    I personally generate an &lt;i&gt;hprof&lt;/i&gt; file with the JVM option &lt;i&gt;-XX:+HeapDumpOnOutOfMemory&lt;/i&gt;.
    Another JVM option &lt;i&gt;-XX:HeapDumpPath=...&lt;/i&gt; allows to specify the
    generated file location.The &lt;a href=&quot;http://www.eclipse.org/mat/&quot;&gt;Eclipse
        MAT&lt;/a&gt; tools helps to visualize the generated file.
&lt;/p&gt;

&lt;p&gt;
    Another solution is to run your program with the Eclipse &lt;a
        href=&quot;http://www.eclipse.org/tptp/&quot;&gt;TPTP tools&lt;/a&gt;. But I prefer to
    avoid this option because it requires much resources to run (and was
    quite unstable the last time I used it).
&lt;/p&gt;

&lt;p&gt;
    &lt;a
        href=&quot;http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html#cms.oom&quot;&gt;&lt;u&gt;Message
            java.lang.OutOfMemoryError: GC limit overhead exceeded&lt;/u&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    This error happens when the system spends too much time executing
    garbage collection. Literally, there is no memory saturation but the
    system uses most of its memory despite garbage collections. A simple
    workaround can be to extend the Heap space. If the problem persists,
    tuning the GC configuration will probably be the solution.
&lt;/p&gt;
</description>
        <pubDate>2014-01-04 00:00:00 +0100</pubDate>
        <link>http://bdulac.github.io//blog/memory-errors-in-java</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/memory-errors-in-java</guid>
        
        
      </item>
    
      <item>
        <title>Design by contract, assertions and exceptions</title>
        <description>&lt;p&gt;Understanding design by contract is important for code quality.&lt;/p&gt;

&lt;p&gt;
    &lt;a href=&quot;http://viaf.org/viaf/51714577&quot;&gt;B. Meyer&lt;/a&gt; &lt;a
        href=&quot;http://www.worldcat.org/oclc/17675237&quot;&gt;introduced the idea&lt;/a&gt;
    in 1988. It takes advantage of &lt;a
        href=&quot;http://dx.doi.org/10.1145/363235.363259&quot;&gt;assertions as
        defined&lt;/a&gt; by &lt;a href=&quot;http://viaf.org/viaf/108123782&quot;&gt;C.A.R. Hoare&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
    Assertions are associated to an object method and qualified in
    one of three categories :
&lt;/p&gt;

&lt;p&gt;
&lt;ul&gt;
    &lt;li&gt;Preconditions are assertions true before executing the method&lt;/li&gt;
    &lt;li&gt;Postconditions are assertions true after executing the method&lt;/li&gt;
    &lt;li&gt;Invariants are assertions true before and after executing the
        method&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
    Meyer includes his idea in the &lt;a href=&quot;http://www.eiffel.com/&quot;&gt;Eiffel&lt;/a&gt;
    programming language : the assertions are checked in a static way (at
    compile time).
&lt;/p&gt;

&lt;p&gt;
    If the &lt;i&gt;Java&lt;/i&gt; programming language provides support for &lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html&quot;&gt;assertions&lt;/a&gt;,
    these are checked only in a dynamic way (at runtime) and disabled by
    default. Because of runtime checking, &lt;a
        href=&quot;http://docs.oracle.com/javase/tutorial/essential/exceptions/&quot;&gt;exceptions&lt;/a&gt;
    are largely used instead of assertions. In &lt;i&gt;Java&lt;/i&gt;, a proper use of
    exceptions&lt;a
        href=&quot;http://docs.oracle.com/javase/tutorial/essential/exceptions/&quot;&gt;&lt;/a&gt;
    is more expressive than a proper use of assertions.
&lt;/p&gt;

&lt;p&gt;
    &lt;a href=&quot;http://viaf.org/viaf/71793922&quot;&gt;Bloch&lt;/a&gt; &lt;a
        href=&quot;http://www.worldcat.org/oclc/124025332&quot;&gt;defines&lt;/a&gt; runtime
    exceptions as programming errors and checked exceptions as recoverable
    conditions.
&lt;/p&gt;

&lt;p&gt;
    In an non-Java context, &lt;a href=&quot;http://viaf.org/viaf/5145169&quot;&gt;Fowler&lt;/a&gt;
    &lt;a href=&quot;http://www.worldcat.org/oclc/630586726&quot;&gt;says&lt;/a&gt; an exception
    is a situation where preconditions are satisfied but postconditions can
    not be satisfied.
&lt;/p&gt;

&lt;p&gt;I consider&lt;/p&gt;

&lt;p&gt;
&lt;ul&gt;
    &lt;li&gt;Runtime exceptions should be used for checking preconditions&lt;/li&gt;
    &lt;li&gt;Checked exceptions should be used when preconditions are true
        but postconditions can not be satisfied, assuming that the method is
        correct (e.g. the network connection is broken).&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
If a runtime exception is raised, the calling method should be bugged
(or its preconditions are not properly checked).
&lt;/p&gt;

&lt;p&gt;
    Some extensions to the &lt;i&gt;Java&lt;/i&gt; platform provide support for static
    testing (assertions checking at compile time). For example, &lt;a
        href=&quot;http://www.eecs.ucf.edu/~leavens/JML/&quot;&gt;JML&lt;/a&gt; takes advantage
    of &lt;i&gt;Java&lt;/i&gt; comments.
&lt;/p&gt;
</description>
        <pubDate>2014-01-03 00:00:00 +0100</pubDate>
        <link>http://bdulac.github.io//blog/design-by-contract-assertions-and-exceptions</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/design-by-contract-assertions-and-exceptions</guid>
        
        
      </item>
    
      <item>
        <title>Java compilation with the Eclipse IDE</title>
        <description>&lt;p&gt;
    You probably have noticed that the &lt;a href=&quot;http://www.eclipse.org/&quot;&gt;Eclipse
        IDE&lt;/a&gt; does not require a &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Java_Development_Kit&quot;&gt;JDK&lt;/a&gt; to
    compile a Java program: this is possible with a simple &lt;a
        href=&quot;http://en.wikipedia.org/wiki/JRE#Execution_environment&quot;&gt;JRE&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
    The IDE &lt;a href=&quot;http://www.eclipse.org/jdt/&quot;&gt;Java development
        tools&lt;/a&gt; include the appropriate components to compile a program. An &lt;a
        href=&quot;http://www.eclipse.org/articles/article.php?file=Article-JavaCodeManipulation_AST/index.html&quot;&gt;AST
        parser&lt;/a&gt; is exposed to help the code manipulation. Compilation is
    generally defined in two steps : analysis and synthesis. The &lt;a
        href=&quot;http://wiki.eclipse.org/FAQ_What_is_an_AST%3F&quot;&gt;AST&lt;/a&gt; is the
    analyzed version of&amp;nbsp; a program organized as a tree connecting
    declarations and definitions. A specific &lt;a
        href=&quot;http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.jdt.doc.isv%2Fguide%2Fjdt_int_model.htm&quot;&gt;API
        called the Java model&lt;/a&gt; provides an abstraction layer for the AST. The C
    development tools &lt;a
        href=&quot;http://www.ibm.com/developerworks/library/os-ecl-cdt3/&quot;&gt;also
        include an AST parser&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
    With such informations, the IDE is in Java able to perform complex
    operations on the code design. Functions exposed in the &lt;a
        href=&quot;http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-menu-refactor.htm&quot;&gt;refactor
        menu&lt;/a&gt; take advantage of the Eclipse AST parser.
&lt;/p&gt;

&lt;p&gt;
    The compilation performed using the Eclipse AST is reliable. Since
    tomcat 5.5, it is &lt;a
        href=&quot;http://tomcat.apache.org/tomcat-5.5-doc/jasper-howto.html&quot;&gt;used
        by the Jasper engine to compile JSPs as servlets&lt;/a&gt;. This is why, since
    this version, the servlet container does not require any longer a JDK
    to run.
&lt;/p&gt;

&lt;p&gt;
    You should be careful when compiling with Eclipse : there are a
    few differences when compiling with the JDK (especially on generics
    transtyping).
&lt;/p&gt;
</description>
        <pubDate>2013-10-24 00:00:00 +0200</pubDate>
        <link>http://bdulac.github.io//blog/java-compilation-with-the-eclipse-ide</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/java-compilation-with-the-eclipse-ide</guid>
        
        
      </item>
    
      <item>
        <title>References, caching and garbage collection</title>
        <description>&lt;p&gt;For a long time I have been wondering how do frameworks manage
    memory while caching.&lt;/p&gt;
&lt;p&gt;
    The &lt;a href=&quot;http://www.eclipse.org/eclipselink/&quot;&gt;EclipseLink&lt;/a&gt;
    documentation &lt;a
        href=&quot;http://wiki.eclipse.org/EclipseLink/UserGuide/JPA/Basic_JPA_Development/Caching/Type_and_Size&quot;&gt;gave
        me the answer&lt;/a&gt;. The Java SE platform provide special references :
&lt;ul&gt;
    &lt;li&gt;&lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/ref/SoftReference.html&quot;&gt;Soft
            references&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/ref/WeakReference.html&quot;&gt;Weak
            references&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/ref/PhantomReference.html&quot;&gt;Phantom
            references&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
According to the official documentation, soft references are used to
provide memory-sensitive properties to cached references. This can be
very efficient.
&lt;/p&gt;

&lt;p&gt;But access to soft-referenced objects needs to be done via
    specific objects so that freed references can be renewed (e.g. via a
    persistent storage).&lt;/p&gt;
&lt;p&gt;
    The official API also provides a special &lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/WeakHashMap.html&quot;&gt;map
        with weak referenced keys&lt;/a&gt;. This class can be useful but is not really
    appropriate for caching as keys are released.
&lt;/p&gt;
</description>
        <pubDate>2013-10-23 00:00:00 +0200</pubDate>
        <link>http://bdulac.github.io//blog/references-caching-and-garbage-collection</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/references-caching-and-garbage-collection</guid>
        
        
      </item>
    
      <item>
        <title>Dynamic assignation and proxy objects</title>
        <description>&lt;p&gt;
    Still in &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_Persistence_API&quot;&gt;JPA&lt;/a&gt;,
    you perhaps wonder how &lt;a
        href=&quot;http://docs.oracle.com/javaee/6/api/javax/persistence/FetchType.html#LAZY&quot;&gt;lazy-loading&lt;/a&gt;
    is managed. This is done via proxy objects.
&lt;/p&gt;

&lt;p&gt;
    The Java SE platform provides a &lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html&quot;&gt;proxy
        class&lt;/a&gt; which creates proxy objects for interfaces. But this does not
    help when you wish to do the job on &lt;a
        href=&quot;http://martinfowler.com/bliki/POJO.html&quot;&gt;POJOs&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
    A framework allows to do this (and many other &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Java_bytecode&quot;&gt;bytecode&lt;/a&gt;
    operations) : &lt;a href=&quot;http://www.jboss.org/javassist/&quot;&gt;Javassist&lt;/a&gt;.
    The &lt;a
        href=&quot;http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/javassist/util/proxy/ProxyFactory.html&quot;&gt;ProxyFactory&lt;/a&gt;
    class allows to build a substitute object for any class via the &lt;a
        href=&quot;http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/javassist/util/proxy/ProxyFactory.html#createClass%28%29&quot;&gt;createClass&lt;/a&gt;
    method. I guess the substitution is done by subclassing.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;
    Instances of this &quot;dynamic&quot; class can be created calling the &lt;a
        href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#newInstance%28%29&quot;&gt;newInstance&lt;/a&gt;
    method. The created object implements the &lt;a
        href=&quot;http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/javassist/util/proxy/Proxy.html&quot;&gt;Proxy&lt;/a&gt;
    interface. To this this interface can be associated a &lt;a
        href=&quot;http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/javassist/util/proxy/MethodHandler.html&quot;&gt;MethodHandler&lt;/a&gt;
    object. Such an object is called on any access to the dynamic instance
    (including null tests). For a lazy-loading field, this is where to
    replace the dynamic instance.
&lt;/p&gt;

&lt;p&gt;
    It is also recommended to specify a &lt;a
        href=&quot;http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/javassist/util/proxy/MethodFilter.html&quot;&gt;MethodFilter&lt;/a&gt;
    object to the ProxyFactory to avoid the creation of proxies when
    finalizing the reference.
&lt;/p&gt;

&lt;p&gt;
&lt;pre&gt;   ProxyFactory factory = new ProxyFactory();
    factory.setSuperclass(MyClass.class);
    factory.setFilter(
      new MethodFilter() {
        public boolean isHandled(Method m) {
            // The filter to avoid finalization
            return !m.getName().equals(&quot;finalize&quot;);
        }
      }
    );
    Class cl = factory.createClass();
    MethodHandler handler = new MethodHandler() {
        public Object invoke(
          Object self, 
          Method m, 
          Method proceed,
          Object[] args
        ) throws Throwable {
            // On each access, execution of the original operation
            return proceed.invoke(self, args);
        }
    };
    MyClass cls = (MyClass)cl.newInstance();
    ((Proxy)cls).setHandler(handler);
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
    My way crossed a single problem with Javassist: null tests. While
    using dynamic objects to avoid unnecessary database access, the method
    filter proceeded the proxy replacement (database access) properly on
    null tests in most cases. But in some rare cases, the null test did not
    call the method filter and did not perform the test properly. Perhaps
    was this a misuse of the library. Anyway the workaround was to perform
    a double check (null reference test + null test on a mandatory
    property) in order to ensure the method filter call.
&lt;/p&gt;
</description>
        <pubDate>2013-10-23 00:00:00 +0200</pubDate>
        <link>http://bdulac.github.io//blog/dynamic-assignation-and-proxy-objects</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/dynamic-assignation-and-proxy-objects</guid>
        
        
      </item>
    
      <item>
        <title>Point of view: Packaging</title>
        <description>&lt;p&gt;
    According to the &lt;a href=&quot;http://www.worldcat.org/oclc/39516151&quot;&gt;UML
        user guide&lt;/a&gt;, object-oriented software elements belong to four
    categories :
&lt;/p&gt;

&lt;p&gt;
&lt;ul&gt;
    &lt;li&gt;Structural things&lt;/li&gt;
    &lt;li&gt;Behavioral things&lt;/li&gt;
    &lt;li&gt;Grouping things&lt;/li&gt;
    &lt;li&gt;Notational things&lt;/li&gt;
&lt;/ul&gt;
Obviously, classes are structural elements.
&lt;/p&gt;

&lt;p&gt;
    According to this same book, &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Package_%28UML%29&quot;&gt;packaging&lt;/a&gt; is
    the act of grouping classes.
&lt;/p&gt;

&lt;p&gt;Something is bothering me about packaging. All programs I have
    been working on, and all courses I have been following, share a single
    vision of the way these groups should be considered.&lt;/p&gt;
&lt;p&gt;
    In this single vision, classes are grouped on structural criteria. In a
    same package, we will find objects assuming a single role. This helps
    designing interesting &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Class_diagram&quot;&gt;class&lt;/a&gt; diagrams.
    To be honest, this has a real interest to build effective heritage
    hierarchies.
&lt;/p&gt;

&lt;p&gt;
    But in my point of view, we let apart behavioral criteria. This means,
    if we design &lt;a href=&quot;http://en.wikipedia.org/wiki/Sequence_diagram&quot;&gt;sequence&lt;/a&gt;,
    &lt;a href=&quot;http://en.wikipedia.org/wiki/Activity_diagram&quot;&gt;activity&lt;/a&gt; or
    &lt;a href=&quot;http://en.wikipedia.org/wiki/State_diagram_%28UML%29&quot;&gt;state&lt;/a&gt;
    diagrams, the involved objects will belong to different packages.
&lt;/p&gt;

&lt;p&gt;If we would like to design really modular applications, I think
    we should consider these two axes in packaging. On a pure design point
    of view, a class should belong to two packages : one structural and one
    behavioral. This could be possible because one class usually has
    interactions with a few classes.&lt;/p&gt;
&lt;p&gt;
    In Java, one solution to help set up this second kind of packages could
    be annotations. But the problem would be in class loading. This
    wouldn't be a real problem if we all time use to &lt;a
        href=&quot;http://dx.doi.org/10.1145/1176617.1176622&quot;&gt;write APIs&lt;/a&gt;.
&lt;/p&gt;
</description>
        <pubDate>2013-10-19 00:00:00 +0200</pubDate>
        <link>http://bdulac.github.io//blog/point-of-view-packaging</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/point-of-view-packaging</guid>
        
        
      </item>
    
      <item>
        <title>Heisenbug - Concurrency case</title>
        <description>&lt;p&gt;
    Solving an &lt;a href=&quot;http://en.wikipedia.org/wiki/Debugger&quot;&gt;Heisenbug&lt;/a&gt;
    can be really tricky. This kind of bugs occur when the program
    execution conditions are changing. In many cases, using a &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Debugger&quot;&gt;debugger&lt;/a&gt; or a log
    output doesn't help. Such tools can have an influence on the execution.
&lt;/p&gt;

&lt;p&gt;
    I once faced such a bug in a &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Java_Swing&quot;&gt;Swing&lt;/a&gt; application.
    The problem occurred in a quite long process (half an hour)&amp;nbsp; at
    various steps with constant input data. I lost time with that bug
    because I had no methodology. I have to admit the solution is really
    simple.
&lt;/p&gt;

&lt;p&gt;
    I simply designed an &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Activity_diagram&quot;&gt;activity
        diagram&lt;/a&gt; of the main activities of the process. I paid attention to
    swimlanes because I suspected a concurrency problem. For each activity
    there was a single log output. A custom logging level was set up so
    that only activity logs could be written (an attempt with the debug
    level logs was completely helpless). The logging framework was also
    configured to print the current thread name. There I got the activity
    which was not in the right place and the name of the criminal. The
    random occurrence of the problem was probably due to the system load
    and user interactions.
&lt;/p&gt;
</description>
        <pubDate>2013-10-18 00:00:00 +0200</pubDate>
        <link>http://bdulac.github.io//blog/heisenbug-concurrency-case</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/heisenbug-concurrency-case</guid>
        
        
      </item>
    
      <item>
        <title>SPI</title>
        <description>&lt;p&gt;
What are the
    &lt;a href=&quot;http://en.wikipedia.org/wiki/Service_provider_interface&quot;&gt;Service
        Provider Interfaces&lt;/a&gt; (SPI) ?
&lt;/p&gt;

&lt;p&gt;
    These are important elements of the Java platform. More documentation is
    available in the &lt;a
        href=&quot;http://docs.oracle.com/javase/tutorial/sound/SPI-intro.html&quot;&gt;official
        tutorial&lt;/a&gt;. In a few words, you probably have noticed the Java APIs
    mainly consist in interfaces. The SPI is the mechanism setting up the
    appropriate implementation so that programs don't rely on the
    implementation at compile time.
&lt;/p&gt;

&lt;p&gt;
    When an implementation is provided, to associate it to the implemented
    interface, there is one (or more) entry point. For example, the &lt;a
        href=&quot;http://en.wikipedia.org/wiki/Java_Persistence_API&quot;&gt;JPA&lt;/a&gt; API
    has for single point the interface &lt;a
        href=&quot;http://docs.oracle.com/javaee/6/api/javax/persistence/spi/PersistenceProvider.html&quot;&gt;javax.persistence.spi.PersistenceProvider&lt;/a&gt;
    . All other interfaces are available via this one.
&lt;/p&gt;

&lt;p&gt;
    If you want to provide a JPA implementation, you first have to code a
    class implementing this interface. Then, a text file named after the
    fully qualified name of the interface should be available to the class
    loader setting up the environment in the &lt;i&gt;META-INF/services&lt;/i&gt;
    directory. &lt;br /&gt; This mean, if you are working with &lt;a
        href=&quot;http://www.eclipse.org/&quot;&gt;Eclipse&lt;/a&gt; IDE in a Java SE
    environment with an &lt;i&gt;src&lt;/i&gt; source directory : &lt;br /&gt;
    &lt;code&gt;src/META-INF/services/javax.persistence.spi.PersistenceProvider&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    This text file just has to contain the available implementations. If I
    want my own implementation (the provider is
    org.test.jpaimpl.PersistenceProvider) to be available along with &lt;a
        href=&quot;http://www.eclipse.org/eclipselink/&quot;&gt;EclipseLink&lt;/a&gt; (the
    provider is &lt;a
        href=&quot;http://www.eclipse.org/eclipselink/api/2.3/org/eclipse/persistence/jpa/PersistenceProvider.html&quot;&gt;org.eclipse.persistence.jpa.PersistenceProvider&lt;/a&gt;
    ) the file has to contain these two lines :&amp;nbsp;
    &lt;code&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;code&gt;org.eclipse.persistence.jpa.PersistenceProvider
        org.test.jpaimpl.PersistenceProvider&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    For the specific case of JPA, when multiple implementations are found
    by the class loader, the implementation to use can be specified in the
    &lt;i&gt;persistence.xml&lt;/i&gt; file, in the &lt;i&gt;provider&lt;/i&gt; element of a &lt;i&gt;persistence-unit&lt;/i&gt;
    :
&lt;p&gt;
&lt;pre&gt;
    &lt;br /&gt; &amp;lt;persistence version=&quot;2.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/persistence&quot; xsi:schemalocation=&quot;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd&quot;&amp;gt;&lt;br /&gt;  &amp;lt;persistence-unit name=&quot;COLLECTIONS&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&amp;gt;&lt;br /&gt;       &amp;lt;provider&gt;org.test.jpaimpl.PersistenceProvider&amp;lt;/provider&amp;gt;&lt;br /&gt;       ...&lt;br /&gt;  &amp;lt;/persistence-unit&amp;gt;&lt;br /&gt;&amp;lt;/persistence&amp;gt;&lt;br /&gt;
&lt;/pre&gt;
&lt;/p&gt;
</description>
        <pubDate>2013-10-16 00:00:00 +0200</pubDate>
        <link>http://bdulac.github.io//blog/spi</link>
        <guid isPermaLink="true">http://bdulac.github.io//blog/spi</guid>
        
        
      </item>
    
  </channel>
</rss>
